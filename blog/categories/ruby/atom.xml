<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Chamnap Chhorn]]></title>
  <link href="http://chamnap.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://chamnap.github.com/"/>
  <updated>2012-06-11T09:26:49+07:00</updated>
  <id>http://chamnap.github.com/</id>
  <author>
    <name><![CDATA[Chamnap Chhorn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Module or Class?]]></title>
    <link href="http://chamnap.github.com/blog/2012/06/10/module-or-class/"/>
    <updated>2012-06-10T23:15:00+07:00</updated>
    <id>http://chamnap.github.com/blog/2012/06/10/module-or-class</id>
    <content type="html"><![CDATA[<p>Just see the title, you would probably could answer this question very well. A module cannot be instantiated, is used to mixin, while a class can be instantiated, and so on. However, this blog post is not a tutorial at all. There is something else you could learn from it.</p>

<p>Last week, I paired with my boss, @jensendarren. He asked me a question about my code which I have never thought before. Why don't you make <code>ListingConverter</code> as a module and use it as a <code>mixin</code> to the <code>Listing</code> class? Actually, he asked me the right thing because sometimes I write a module, some other times I write a class and using <code>delegate</code>. Here is my code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Listing</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:to_solr</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="n">converter</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def converter&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">ListingConverter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>He probably wants something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Listing</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ListingConverter</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module ListingConverter</span>
</span><span class='line'><span class="sr">  def to_solr</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At that time, I couldn't answer him very well. I have read <a href="http://www.amazon.com/Rails-AntiPatterns-Refactoring-Addison-Wesley-Professional/dp/0321604814">Rails Anti-Pattern book</a> some months ago and I followed that book because it's very convincing to me.
To be honest I never thought about using as a <code>module</code> or a <code>class</code>. I just understand that the author is trying to break responsibilities into multiple classes, <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibilities Principle (SRP)</a>. Each class should have very specific use case and few reasons to change.</p>

<p>Thinking about SRP reminds me about blog post, <a href="http://blog.rubybestpractices.com/posts/gregory/055-issue-23-solid-design.html">SOLID Design Principles</a> from <a href="http://blog.rubybestpractices.com/about/gregory.html">Gregory Brown</a> which I read it some months ago as well. For me, it's an excellent blog post because it changes me quite a lot. I would recommend you go through it, at least <strong>SRP</strong>. My response will take it as a reference.</p>

<p>Actually, these two above code achieve the same result, but there is case where we should use one rather than the other. In this case, <strong>I would say a <code>class</code> wins over a <code>module</code> in terms of efficiency.</strong></p>

<p>My <code>ListingConverter</code> class contains only 1 public method, <code>#to_solr</code> and almost 20 private methods. It is responsible for converting into solr json format.</p>

<ul>
<li><p>If <code>ListingConverter</code> is a module, <code>Listing</code> would contain unneccessary methods,  and if we have 50 mixined into, the <code>Listing</code> instance would become bigger and bigger objects, 200 methods. Imagine this case, what if each module has name collision? Then, it might be difficult to track down the case and find out what's wrong in those 50 mixins. Usually, a <code>Listing</code> instance would not use <code>to_solr</code> method most of the time, but those additional methods from each module are always there which is not optimal at all. The thing will be worse when we load 5000 <code>Listing</code> instance at a time to do reporting for example because the memory would go up steadily.</p></li>
<li><p>Make <code>ListingConverter</code> as a class is more about <strong>Single Responsibility</strong>. This class just does only one thing, convert <code>activerecord</code> into <code>solr</code>. It would be better to treat <code>Listing</code> class like a big entity contains many small entities. It should forward the message requested to its contained objects. Finally, use <code>delegate</code> from <code>Rails</code> to make interaction a bit easier. What <a href="https://github.com/rails/rails/blob/8ba491acc31bf08cf63a83ea0a3c314c52cd020f/activesupport/lib/active_support/core_ext/module/delegation.rb#L104">delegate</a> does is that it defines methods that are passed in and forwards those methods to the <code>:to</code> object. You could do mannually as below.</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">to_solr</span>
</span><span class='line'>  <span class="no">ListingConverter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="n">to_solr</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It only instantiates <code>ListingConverter</code> only when we call <code>#to_solr</code> method which is more efficient. At the end of the day, the <code>Listing</code> class contains only 1 additional public method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy-loaded object]]></title>
    <link href="http://chamnap.github.com/blog/2012/06/02/lazy-loaded-object/"/>
    <updated>2012-06-02T23:26:00+07:00</updated>
    <id>http://chamnap.github.com/blog/2012/06/02/lazy-loaded-object</id>
    <content type="html"><![CDATA[<p>Last week, we decided to remove <code>sunspot</code> gem from this new version App. Therefore, I rolled out a simple and small <code>solr</code> library.</p>

<p>I went through the <a href="http://railscasts.com/episodes/239-activerecord-relation-walkthrough">ActiveRelation Walkthrough</a> episode from RailsCasts long time ago, but now I have a chance to do something similar. I want the search response object lazy to load activerecord objects. I don't want to call <code>#results</code> method the same as <code>sunspot</code> does. Actually, it's a nice trick and simple to do it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Solr::Response&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kp">attr_reader</span> <span class="ss">:response</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">clazz</span><span class="p">,</span> <span class="n">raw_response</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@clazz    = clazz</span>
</span><span class='line'><span class="sr">@response = JSON.parse(raw_response)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">docs</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;response[&quot;response&quot;][&quot;docs&quot;]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">total</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;response[&quot;response&quot;][&quot;numFound&quot;].to_i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">inspect</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;to_a.inspect</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">to_a</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;return @records if loaded?</span>
</span><span class='line'>
</span><span class='line'><span class="sr">uuids    = docs.collect { |doc| doc[&#39;uuid&#39;] }</span>
</span><span class='line'><span class="sr">@records = load_objects(@clazz, uuids)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">loaded?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;defined?(@records)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">load_objects</span><span class="p">(</span><span class="n">clazz</span><span class="p">,</span> <span class="n">uuids</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;return [] if uuids.blank?</span>
</span><span class='line'>
</span><span class='line'><span class="sr">records = clazz.unscoped.where(:uuid =&amp;gt; uuids).to_a</span>
</span><span class='line'><span class="sr">return [] if records.blank?</span>
</span><span class='line'>
</span><span class='line'><span class="sr">uuids.inject([]) do |result, uuid|</span>
</span><span class='line'><span class="sr">  result &amp;lt;&amp;lt; records.find { |record| record.uuid == uuid }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;to_a.send(*args, &amp;amp;block)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After sending the request to Solr, it will initialize the response object by passing solr response and the class to retreive the results.</p>

<p>The trick is to overwrite <code>#inspect</code> method so that when in the console, you will see the objects back. <code>#to_a</code> method is responsible loading the objects.</p>

<p>The question is that when to load? I want the caller be able to iterate through the collection by using standard Ruby enumerable methods such as <code>each</code>, <code>inject</code>, ...... My solution is to overwrite <code>method_missing</code> by sending any undefined methods to <code>#to_a</code> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@listings</span> <span class="o">=</span> <span class="no">Solr</span><span class="o">::</span><span class="no">Listing</span><span class="o">.</span><span class="n">text_search</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'><span class="vi">@listings</span><span class="o">.</span><span class="n">class</span>     <span class="c1">#Solr::Response</span>
</span><span class='line'><span class="vi">@listings</span><span class="o">.</span><span class="n">total</span>     <span class="c1">#1367, total founds from solr</span>
</span><span class='line'><span class="vi">@listings</span><span class="o">.</span><span class="n">count</span>     <span class="c1">#20, +count+ method on array</span>
</span><span class='line'><span class="vi">@listings</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>        <span class="c1">#Listing class</span>
</span><span class='line'><span class="vi">@listings</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Everything works fine except when it renders the view. It shows this error <code>[....] is not an ActiveModel-compatible object that returns a valid partial path.</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">render</span> <span class="vi">@listings</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After digging through google, it simply means it doesn't know the partial path to render because it is my new object. Therefore, I just one more method in <code>Solr::Response</code> class. It's pretty simple, actually. <code>ActiveModel</code> does the same thing, <a href="http://apidock.com/rails/v3.2.3/ActiveModel/Conversion/to_partial_path">http://apidock.com/rails/v3.2.3/ActiveModel/Conversion/to_partial_path</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">to_partial_path</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@clazz._to_partial_path</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There is still one last tiny problem, it seems <code>Rails</code> doesn't know my new object is a collection object. It passes the whole object to each partial views. How does <code>Rails</code> knows how the passed objects is collection or single object? I digged out the <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_view/renderer/partial_renderer.rb#L357">rails source code</a>. Actually, it checks with <code>to_ary</code> method, so I just <code>alias</code> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span> <span class="ss">:to_ary</span> <span class="ss">:to_a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reduce If/Else Statements]]></title>
    <link href="http://chamnap.github.com/blog/2012/05/27/reduce-if-else-statements/"/>
    <updated>2012-05-27T23:35:00+07:00</updated>
    <id>http://chamnap.github.com/blog/2012/05/27/reduce-if-else-statements</id>
    <content type="html"><![CDATA[<p>In the new project, we have built recently at <code>Yoolk</code>. I really enjoyed a lot of refactoring the app.</p>

<p>There are things which always bother me a lot is the <code>if/else</code> statements. I see them all the time. In my views, <code>if/else</code> should be used at the low level of coding. We should not use them too much because it doesn't make the code readable.</p>

<p>I remembered <a href="http://vorleakchy.com/">vorleak</a>, my coworker, and I are moderators in a study group long time ago about <a href="http://chamnap.github.com/blog/2009/09/05/principles-in-refactoring/">Principles of Refacoring</a>. Two principles that really inspires me quite alot: <strong>less code == less bugs</strong> and <strong>write code for human, not for machine</strong>.</p>

<p>It looks simple to experienced <code>Rails</code> developers, but it's useful for novice people. Here are some tips to reduce <code>if/else</code> statements:</p>

<ul>
<li>Use <code>find_or_initialize_by</code>, <code>find_or_create_by</code> method</li>
</ul>


<p>As the method name, it's a cleaner way to get/create objects without <code>if/else</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;A shorter version&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_initialize_by</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user_name</span><span class="o">]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;A longer version with if statement&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_user_name</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user_name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:user_name</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user_name</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Be sure to check more about these methods if you didn't know on <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">http://api.rubyonrails.org/classes/ActiveRecord/Base.html</a> in the <strong>Dynamic attribute-based finders</strong> section.</p>

<ul>
<li>Use <code>try</code> for possible nil object</li>
</ul>


<p>Invoke <code>try</code> for object that could be nil. It's more convienient than doing a check by yourself.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Without try&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vi">@person</span> <span class="p">?</span> <span class="vi">@person</span><span class="o">.</span><span class="n">name</span> <span class="p">:</span> <span class="kp">nil</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;With try&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vi">@person</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, don't confuse with the below situation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Don&#39;t invoke try with non-existed methods&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vi">@person</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:abcde</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Call respond_to instead&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vi">@person</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:abcde</span><span class="p">)</span> <span class="p">?</span> <span class="n">t</span><span class="o">.</span><span class="n">abcde</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Try</code> also be called with block as well so that you can call multiple methods in a scope of try.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">try</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">p</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">p</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Check this document, <a href="http://api.rubyonrails.org/classes/Object.html#method-i-try">http://api.rubyonrails.org/classes/Object.html#method-i-try</a> as well.</p>

<ul>
<li>Use <code>||</code> operator + <code>presence</code> method</li>
</ul>


<p>The <code>||</code> is a common idiom in Ruby. However, it doesn't work well if the first operand is empty string. The <code>presence</code> method will return nil instead of "" if the object is `blank?``, otherwise it return the actual object back.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="ss">:host</span><span class="o">].</span><span class="n">presence</span> <span class="o">||</span> <span class="s1">&#39;localhost&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Use default value</li>
</ul>


<p>Use default value so that you don't else clause.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;should do this way, it&#39;s more readable.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">subscription</span> <span class="o">=</span> <span class="s1">&#39;normal&#39;</span>
</span><span class='line'><span class="n">subscription</span> <span class="o">=</span> <span class="s1">&#39;premium&#39;</span> <span class="k">if</span> <span class="n">condition</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Keep the if/else logic in fewer places</li>
</ul>


<p>Wrap them in a function and reuse it where it is possible. Sometimes, it 's hard to extract it into function because they are slightly different. Try to write in general context, think about its behavior, and make it fit.</p>

<p>If you feel you are doing too much <code>if/else</code>, go back one step why you are doing that way. Try to use the correct objects that fit to your scenarios.</p>

<p>Here is my coworker's version generating the last 12 months stats. He manipulates the <code>string</code> object.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">last_twelve_months</span>
</span><span class='line'>  <span class="n">default_value</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;views&quot;</span><span class="o">=&gt;</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;website_clicks&quot;</span><span class="o">=&gt;</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;email_clicks&quot;</span><span class="o">=&gt;</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;billboard_clicks&quot;</span><span class="o">=&gt;</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;sponsor_views&quot;</span> <span class="o">=&gt;</span><span class="mi">0</span><span class="p">}</span>
</span><span class='line'>  <span class="n">current_month</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">yesterday</span><span class="o">.</span><span class="n">month</span>
</span><span class='line'>  <span class="n">twelve_months</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">12</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;month = current_month - i</span>
</span><span class='line'><span class="sr">if month &amp;gt; 0</span>
</span><span class='line'><span class="sr">  yearmonth = Date.yesterday.year.to_s + (&quot;%02d&quot; % month)</span>
</span><span class='line'><span class="sr">elsif month == 0</span>
</span><span class='line'><span class="sr">  yearmonth = Date.yesterday.year.to_s + (&quot;%02d&quot; % current_month)</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  month = month + 13</span>
</span><span class='line'><span class="sr">  yearmonth = (Date.yesterday.year - 1).to_s + (&quot;%02d&quot; % month)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">twelve_months[yearmonth] = self.yearmonths[yearmonth].blank? ? default_value : self.yearmonths[yearmonth]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Hash</span><span class="o">[</span><span class="n">twelve_months</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">k</span><span class="o">.</span><span class="n">to_i</span><span class="p">}</span><span class="o">.</span><span class="n">last</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">resolve_language</span>
</span><span class='line'>  <span class="n">language_uuid</span> <span class="o">=</span> <span class="n">cookies</span><span class="o">[</span><span class="s2">&quot;language_uuid&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@active_language</span> <span class="o">=</span> <span class="k">if</span> <span class="n">language_uuid</span> <span class="ow">and</span> <span class="vi">@portal</span><span class="o">.</span><span class="n">languages</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:uuid</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">language_uuid</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@portal.languages.find(language_uuid)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@portal</span><span class="o">.</span><span class="n">language</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  I18n.locale = @active_language.two_code</span>
</span><span class='line'><span class="sr">  @inactive_languages = @portal.languages.select {|language| language.uuid != @active_language.uuid}</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, it's my version, much shorter and less code.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">last_year</span>
</span><span class='line'>  <span class="k">return</span> <span class="vi">@last_year</span> <span class="k">if</span> <span class="vi">@last_year</span><span class="o">.</span><span class="n">present?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  defaults = Hash.new</span>
</span><span class='line'><span class="sr">  12.downto(1).each do |i|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">date</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">months</span><span class="o">.</span><span class="n">ago</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">date</span><span class="o">.</span><span class="n">year</span><span class="si">}</span><span class="s2">%02d&quot;</span> <span class="o">%</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">date</span><span class="o">.</span><span class="n">month</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">defaults</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;views&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;website_clicks&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;email_clicks&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;billboard_clicks&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="n">existings</span> <span class="o">=</span> <span class="n">yearmonths</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">defaults</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@last_year</span> <span class="o">=</span> <span class="n">defaults</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">existings</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">resolve_language</span>
</span><span class='line'>  <span class="n">language_uuid</span> <span class="o">=</span> <span class="n">cookies</span><span class="o">[</span><span class="s2">&quot;language_uuid&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@language</span>     <span class="o">=</span> <span class="vi">@portal</span><span class="o">.</span><span class="n">has_language?</span><span class="p">(</span><span class="n">language_uuid</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@language</span>   <span class="o">||=</span> <span class="vi">@portal</span><span class="o">.</span><span class="n">default_language</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  I18n.locale = @language.two_code</span>
</span><span class='line'><span class="sr">  @inactive_languages = @portal.languages_except_by(@language.uuid)</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><code>Polymorphism</code> + <code>Factory pattern</code></li>
</ul>


<p>I recommend you read the book from <strong>Martin Fowler, Improving the Design of Existing Code</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How useful is monit?]]></title>
    <link href="http://chamnap.github.com/blog/2011/10/19/how-useful-is-monit/"/>
    <updated>2011-10-19T16:09:00+07:00</updated>
    <id>http://chamnap.github.com/blog/2011/10/19/how-useful-is-monit</id>
    <content type="html"><![CDATA[<p>From here assuming that you know what monit is, but if you don’t, just go to see <a href="http://mmonit.com/monit/">Monit</a>. It’s basically a monitoring utility in unix system. You could monitor almost anything in your server. It’ll automatically restart the service if it stops and send you an email.</p>

<p>Generally, some people don't like it very much because it send too many emails when your server is in trouble, and those emails are annoying. A part of my job is the servers' maintainer and deployer. My job is to keep the servers fast and stable. By now, we have around 10 servers using Amazon Web Service. There are many services need to be run properly, otherwise my work’s inbox will contain some new emails. There are some ruby scripts as well need to run on the production server. The problem is those scripts are a bit heavy, it took more than 50% of the cpu to process, and if we more than 2 simultaneously, we’ll see some complaints from customers saying that "our websites are performing slowly. Why?"</p>

<p>Generally, we often lose our server because something is wrong on the server. We are really don't know why. It happens on one server after another. Until I decide to use monit to monitor many services as possible. It seems when the ubuntu server is heavily processing, the sshd service is down. We never know it was down. We just can’t remote our server. The solution is to reboot, but next few days it happens again. Usually, when something weird happens during the startup, the sshd service is never up. How can we remote to those servers? Clearly, there are no way if that service is down.</p>

<p>I see the answer when I add monit on all servers, and I run some scripts on the server as usual. The next morning came up, two emails from monit saying "sshd is down" and "sshd is up". (I didn't notice about it until the next few days.) That's good, isn't it? I don't have to reboot the server. When monit detects there is no such service, it simply restart that service. By now, I don't really understand why sshd is always down when the server is heavily busy. I tried to upgrade to the latest AWS ami already, but the problem still exists. Maybe the server is too overloaded. The solution is to expand more servers or refactor those ruby processes.</p>

<p>Be sure to monit sshd service to all your server.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>check process sshd with pidfile /var/run/sshd.pid&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;group system
</span><span class='line'>start program  <span class="s2">&quot;/etc/init.d/ssh start&quot;</span>
</span><span class='line'>stop program  <span class="s2">&quot;/etc/init.d/ssh stop&quot;</span>
</span><span class='line'><span class="k">if </span>failed port 1234 protocol ssh <span class="k">then </span>restart
</span><span class='line'><span class="k">if </span>5 restarts within 5 cycles <span class="k">then </span>timeout
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can checkout <a href="https://github.com/mojombo/god">God</a> as well if you want nicer syntax and more readable code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Object Model Presentation]]></title>
    <link href="http://chamnap.github.com/blog/2010/08/17/ruby-object-model-presentation/"/>
    <updated>2010-08-17T10:13:00+07:00</updated>
    <id>http://chamnap.github.com/blog/2010/08/17/ruby-object-model-presentation</id>
    <content type="html"><![CDATA[<p>I conduct a training on Ruby Object Model this week. I start talking about Ruby from scratch then the object model of Ruby. At the same time, I discussed about JavaScript object model.</p>

<div style="width:425px" id="__ss_4978263"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/cchamnap/ruby-object-model-4978263" title="Ruby object model" target="_blank">Ruby object model</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/4978263" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/thecroaker/death-by-powerpoint" target="_blank">PowerPoint</a> from <a href="http://www.slideshare.net/cchamnap" target="_blank">Chamnap Chhorn</a> </div> </div>

]]></content>
  </entry>
  
</feed>
